{"version":3,"sources":["ts/chain-part.ts","ts/chain-game.ts","ts/main.ts"],"names":[],"mappings":"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","file":"main.0e24b174.js","sourceRoot":"..\\src","sourcesContent":["/** パーツごとの大きさ */\r\nexport const PART_SIZE = 10;\r\n\r\n/** 隣接する要素の方向 */\r\ntype Direction = 'top' | 'right' | 'bottom' | 'left';\r\n\r\n/** 回転の状態 */\r\ntype RotateStatus = 0 | 1 | 2 | 3;\r\n\r\n\r\n/** 個々のパーツクラス */\r\nexport class ChainPart {\r\n\r\n    /** 描画時の傾き */\r\n    private angle: number;\r\n\r\n    /** 回転状態 */\r\n    private rotation: RotateStatus;\r\n\r\n    /** 回転のステップ数 */\r\n    private rotatingCount: number;\r\n\r\n    /** 回転しているかどうかの状態 */\r\n    private _isRotating = false;\r\n\r\n    /** 回転しているかどうかの状態、公開用 */\r\n    get isRotating(): boolean {\r\n        return this._isRotating;\r\n    }\r\n\r\n    /** 隣接するパーツへの参照 */\r\n    private neighbors = new Map<Direction, ChainPart>();\r\n\r\n    /** 回転完了状態のフラグ */\r\n    private hasRotated = false;\r\n\r\n\r\n    /** 音声コンテキスト */\r\n    static audioCtx: AudioContext;\r\n\r\n    /** 音量調整用のゲインノード */\r\n    static gainNode: GainNode;\r\n\r\n\r\n    constructor(\r\n        private x: number,\r\n        private y: number\r\n    ) {\r\n        this.init();\r\n    }\r\n\r\n\r\n    /** 回転状態の初期化 */\r\n    init(): void {\r\n\r\n        this.rotation = Math.floor(Math.random() * 4) as RotateStatus;\r\n        this.angle = Math.PI / 2 * this.rotation;\r\n        this._isRotating = false;\r\n        this.rotatingCount = 0;\r\n\r\n    }\r\n\r\n    /** 隣接するパーツへの参照を追加 */\r\n    appendNeighbor(direction: Direction, neighbor: ChainPart): void {\r\n\r\n        this.neighbors.set(direction, neighbor);\r\n\r\n    }\r\n\r\n    /** 回転開始 */\r\n    rotate(): void {\r\n\r\n        if (this._isRotating) {\r\n            return;\r\n        }\r\n        this._isRotating = true;\r\n        this.rotatingCount = 0;\r\n        this.playSound();\r\n\r\n    }\r\n\r\n    /** 回転時の効果音を鳴らす */\r\n    private playSound(): void {\r\n\r\n        const osc = new OscillatorNode(ChainPart.audioCtx);\r\n        osc.type = 'sine';\r\n        osc.frequency.value = 300 + this.rotation * 100;\r\n        osc.connect(ChainPart.gainNode);\r\n        osc.start();\r\n        setTimeout(() => osc.stop(), 100);\r\n\r\n    }\r\n\r\n    /** 隣接する要素を回転させる */\r\n    private rotateNeighbors(): void {\r\n\r\n        this.neighbors.forEach((part, direction) => {\r\n            if (\r\n                (\r\n                    direction === 'top' &&\r\n                    (part.rotation === 1 || part.rotation === 2) &&\r\n                    (this.rotation === 0 || this.rotation === 3)\r\n                ) ||\r\n                (\r\n                    direction === 'right' &&\r\n                    (part.rotation === 2 || part.rotation === 3) &&\r\n                    (this.rotation === 0 || this.rotation === 1)\r\n                ) ||\r\n                (\r\n                    direction === 'bottom' &&\r\n                    (part.rotation === 0 || part.rotation === 3) &&\r\n                    (this.rotation === 1 || this.rotation === 2)\r\n                ) ||\r\n                (\r\n                    direction === 'left' &&\r\n                    (part.rotation === 0 || part.rotation === 1) &&\r\n                    (this.rotation === 2 || this.rotation === 3)\r\n                )\r\n            ) {\r\n                part.rotate();\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    /** フレーム毎の更新 */\r\n    update(): void {\r\n\r\n        if (this._isRotating) {\r\n            this.angle = (this.angle + Math.PI / 20) % (Math.PI * 2);\r\n            if (++this.rotatingCount == 10) {\r\n                this._isRotating = false;\r\n                this.rotation = (this.rotation + 1) % 4 as RotateStatus;\r\n                this.hasRotated = true;\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    /** 回転完了時の隣接要素の更新 */\r\n    updateNeighbors(): void {\r\n        if (this.hasRotated) {\r\n            this.rotateNeighbors();\r\n            this.hasRotated = false;\r\n        }\r\n    }\r\n\r\n    /** 画面描画 */\r\n    draw(ctx: CanvasRenderingContext2D): void {\r\n\r\n        const harfSize = PART_SIZE / 2;\r\n        ctx.save();\r\n        ctx.fillStyle = '#ddd';\r\n        ctx.strokeStyle = \r\n            this.rotation === 0 ? 'blue' :\r\n            this.rotation === 1 ? 'red' :\r\n            this.rotation === 2 ? 'green' :\r\n            'orange';\r\n        ctx.lineWidth = 2;\r\n        ctx.translate(this.x + harfSize, this.y + harfSize);\r\n        ctx.rotate(this.angle);\r\n        if (this.isRotating) {\r\n            ctx.beginPath();\r\n            ctx.arc(0, 0, harfSize, 0, Math.PI * 2);\r\n            ctx.fill();\r\n        }\r\n        ctx.beginPath();\r\n        ctx.moveTo(0, -harfSize);\r\n        ctx.lineTo(0, 0);\r\n        ctx.lineTo(harfSize, 0);\r\n        ctx.stroke();\r\n        ctx.restore();\r\n\r\n    }\r\n\r\n}\r\n\r\n/** パーツクラスのスタティックメンバの初期化 */\r\n{\r\n\r\n    ChainPart.audioCtx = new AudioContext();\r\n    ChainPart.gainNode = ChainPart.audioCtx.createGain();\r\n    ChainPart.gainNode.gain.value = 0.008;\r\n    ChainPart.gainNode.connect(ChainPart.audioCtx.destination);\r\n\r\n}\r\n\r\n","import { ChainPart, PART_SIZE } from './chain-part';\r\n\r\n/** 1辺あたりのパーツの数 */\r\nconst PART_COUNT = 50;\r\n\r\n/** キャンバスのサイズ */\r\nconst CANVAS_SIZE = PART_SIZE * PART_COUNT;\r\n\r\n\r\n/** チェインゲームの本体クラス */\r\nexport class ChainGame {\r\n\r\n    /** キャンバスコンテキスト */\r\n    private context: CanvasRenderingContext2D;\r\n\r\n    /** バッファキャンバス */\r\n    private bufferCanvas: HTMLCanvasElement;\r\n\r\n    /** バッファキャンバスのコンテキスト */\r\n    private bufferContext: CanvasRenderingContext2D;\r\n\r\n    /** キャンバスの座標情報 */\r\n    private canvasRect: DOMRect;\r\n\r\n    /** パーツ郡への参照 */\r\n    private parts: ChainPart[][];\r\n\r\n    /** タイマーのID */\r\n    private timer: number;\r\n\r\n\r\n    constructor(\r\n        private canvas: HTMLCanvasElement\r\n    ) {\r\n        this.context = canvas.getContext('2d');\r\n        this.canvasRect = canvas.getBoundingClientRect();\r\n        this.bufferCanvas = document.createElement('canvas');\r\n        this.bufferContext = this.bufferCanvas.getContext('2d');\r\n    }\r\n\r\n\r\n    /** ゲームの開始 */\r\n    start(): void {\r\n\r\n        this.canvas.width = this.canvas.height = CANVAS_SIZE;\r\n        this.bufferCanvas.width = this.bufferCanvas.height = CANVAS_SIZE;\r\n\r\n        this.canvas.addEventListener('mousedown', this.onClick.bind(this));\r\n\r\n        this.parts = Array.from(Array(PART_COUNT), (_, y) =>\r\n            Array.from(Array(PART_COUNT), (_, x) =>\r\n                new ChainPart(x * PART_SIZE, y * PART_SIZE)\r\n            )\r\n        );\r\n\r\n        for (let y = 0; y < PART_COUNT; y++) {\r\n            for (let x = 0; x < PART_COUNT; x++) {\r\n                const part = this.parts[y][x];\r\n                if (y > 0) {\r\n                    part.appendNeighbor('top', this.parts[y - 1][x]);\r\n                }\r\n                if (x < PART_COUNT - 1) {\r\n                    part.appendNeighbor('right', this.parts[y][x + 1]);\r\n                }\r\n                if (y < PART_COUNT - 1) {\r\n                    part.appendNeighbor('bottom', this.parts[y + 1][x]);\r\n                }\r\n                if (x > 0) {\r\n                    part.appendNeighbor('left', this.parts[y][x - 1]);\r\n                }\r\n            }\r\n        }\r\n\r\n        // TODO: requestAnimationFrameを使うよりも早い？ 要検証\r\n        this.timer = setInterval(this.update.bind(this), 1000 / 60);\r\n\r\n        console.log('chain game started!');\r\n\r\n    }\r\n\r\n    /** ゲームのリセット */\r\n    reset(): void {\r\n\r\n        for (const parts of this.parts) {\r\n            for (const part of parts) {\r\n                part.init();\r\n            }\r\n        }\r\n\r\n        this.draw();\r\n\r\n    }\r\n\r\n    /** ゲームの終了 */\r\n    end(): void {\r\n\r\n        clearInterval(this.timer);\r\n\r\n    }\r\n\r\n    /** フレーム毎の更新 */\r\n    private update(): void {\r\n\r\n        for (const parts of this.parts) {\r\n            for (const part of parts) {\r\n                part.update();\r\n            }\r\n        }\r\n\r\n        for (const parts of this.parts) {\r\n            for (const part of parts) {\r\n                part.updateNeighbors();\r\n            }\r\n        }\r\n\r\n        this.draw();\r\n\r\n    }\r\n\r\n    /** 画面描画 */\r\n    private draw(): void {\r\n\r\n        this.context.clearRect(0, 0, CANVAS_SIZE, CANVAS_SIZE);\r\n        this.bufferContext.clearRect(0, 0, CANVAS_SIZE, CANVAS_SIZE);\r\n\r\n        for (const parts of this.parts) {\r\n            for (const part of parts) {\r\n                part.draw(this.bufferContext);\r\n            }\r\n        }\r\n\r\n        this.context.drawImage(this.bufferCanvas, 0, 0, CANVAS_SIZE, CANVAS_SIZE);\r\n\r\n    }\r\n\r\n    /** キャンバスクリック時のイベントハンドラ */\r\n    private onClick(e: MouseEvent): void {\r\n\r\n        const x = Math.floor((e.clientX - this.canvasRect.x) / PART_SIZE);\r\n        const y = Math.floor((e.clientY - this.canvasRect.y) / PART_SIZE);\r\n        this.parts[y][x].rotate();\r\n\r\n    }\r\n\r\n}\r\n","import { ChainGame } from './chain-game';\r\n\r\nfunction main() {\r\n\r\n    const canvas = document.getElementById('canvas') as HTMLCanvasElement;\r\n    const game = new ChainGame(canvas);\r\n    game.start();\r\n\r\n    const resetBtn = document.getElementById('reset');\r\n    resetBtn.addEventListener('click', game.reset.bind(game));\r\n\r\n}\r\n\r\nmain();\r\n"]}